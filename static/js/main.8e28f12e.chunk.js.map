{"version":3,"sources":["components/TodoItem.js","components/TodosList.js","components/Header.js","components/InputTodo.js","components/TodoContainer.js","index.js"],"names":["TodoItem","alert","this","props","todo","completed","id","title","className","type","checked","onChange","handleChangeProps","onClick","deleteTodoProps","style","fontStyle","color","opacity","textDecoration","Component","TodosList","todos","map","key","Header","prevProps","prevState","headerSpan","bgColor","Math","floor","random","document","getElementById","innerHTML","backgroundColor","padding","lineHeight","fontSize","marginBottom","InputTodo","state","e","setState","target","name","value","handleSubmit","preventDefault","addTodoProps","onSubmit","placeholder","ToDoContainer","show","handleChange","delTodo","axios","delete","then","response","filter","addTotoItem","post","data","get","params","_limit","React","ReactDOM","render","TodoContainer"],"mappings":"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","file":"static/js/main.8e28f12e.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n\nclass TodoItem extends Component {\n\n    componentWillUnmount() {\n        alert(\"Item about to be deleted!\");\n    }\n    \n    render() {\n     \n        const completedStyle = {\n            fontStyle: \"italic\",\n            color: \"#d35e0f\",\n            opacity: 0.4,\n            textDecoration: \"line-through\",\n        }\n\n        const { completed, id, title } = this.props.todo\n\n        return  <li className=\"todo-item\"> \n            <input type=\"checkbox\" \n        checked={completed}\n        onChange={() => this.props.handleChangeProps(id)}\n        />\n         <button onClick={() =>\n        this.props.deleteTodoProps(id)}>Delete</button>\n       \n       <span style={completed ? completedStyle : null}>\n        {title}\n        </span>\n        </li>\n    }\n}\n\nexport default TodoItem\n","import React, { Component } from 'react'\nimport TodoItem from './TodoItem'\n\n class TodosList extends Component {\n    render() {\n        return (\n            //access data through props from TodoContainer\n            <div>\n                {this.props.todos.map(todo => (\n                   <TodoItem \n                   key={todo.id} \n                   todo={todo}\n                   handleChangeProps={this.props.handleChangeProps}\n                    deleteTodoProps={this.props.deleteTodoProps}\n                    />\n                ))}\n            </div>\n        )\n    }\n}\n\nexport default TodosList\n","import React, { Component } from \"react\"\n\nclass Header extends Component {\n\n    //update lifecycle method\n    componentDidUpdate(prevProps, prevState) {\n        if(prevProps.headerSpan !== this.props.headerSpan) {\n            \n            var x = Math.floor(Math.random() * 256);\n            var y = Math.floor(Math.random() * 256);\n            var z = Math.floor(Math.random() * 256);\n            var bgColor = \"rgb(\" + x + \",\" + y + \",\" + z + \")\";\n\n            if(prevProps.headerSpan !== this.props.headerSpan) {\n                document.getElementById(\"inH1\").innerHTML = \"clicked\";\n                document.getElementById(\"inH1\").style.backgroundColor = bgColor;\n            }\n        }\n    }\n\n    render() {\n      const headerStyle = {\n        padding: \"20px 0\",\n        lineHeight: \"2em\",\n      }\n      return (\n        <header style={headerStyle}>\n          <h1 style={{ fontSize: \"25px\", marginBottom: \"15px\" }}>\n            Simple Todo App <span id=\"inH1\"></span>\n          </h1>\n          <p style={{ fontSize: \"19px\" }}>\n            Please add to-dos item(s) through the input field\n          </p>\n        </header>\n      )\n    }\n  }\n  \n  export default Header","import React, { Component } from 'react'\n\nclass InputTodo extends Component {\n//make a controlled component and make controlled by compoonent state rather than the DOM\nstate = {\n    title: \"\"\n};\n\n//type anything in the input field, event handler will trigger\n//then calls onChange() class method and will rerender the state using setState method to the title \nonChange = e => {\n    this.setState({\n        [e.target.name]: e.target.value\n    });\n};\n\nhandleSubmit = e => {\n    e.preventDefault();\n    this.props.addTodoProps(this.state.title);\n    this.setState({\n        title: \"\"\n    });\n};\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit} className=\"form-container\">\n                <input \n                type=\"text\" \n                placeholder=\"Add todo...\"\n                value={this.state.title}\n                name=\"title\"\n                onChange={this.onChange}\n                />\n                <input type=\"submit\" className=\"input-submit\" value=\"Submit\"\n            />\n            </form>\n        )\n    }\n}\n\nexport default InputTodo\n","import React from \"react\"\nimport TodosList from \"./TodosList\"\nimport Header from \"./Header\"\nimport InputTodo from \"./InputTodo\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport axios from 'axios'\n\n\nclass ToDoContainer extends React.Component {\n\n    //states, array of objects\n    //defined todos in the state object\n    state = {\n        todos: [\n           \n        ],\n        show: false\n    };\n//acccessed toodos in the render method\n//looped through the array of objects, and output each title\n    handleChange = id => {\n        this.setState({\n            //loop through todos data and check if any items\n            // id matches the checked id, then flip the completed value\n            todos: this.state.todos.map(todo => {\n                if (todo.id === id) {\n                    todo.completed = !todo.completed;\n                }\n                return todo;\n            }),\n            show: !this.state.show,\n        })\n    };\n\n    delTodo = id => {\n        axios.delete('https://jsonplaceholder.typicode.com/todos/${id}')\n        .then(response => \n        this.setState({\n            //for each of the todos data we are looping through\n            //we want to retain the ones whos id is not equal to the id passed in\n            todos: [\n                ...this.state.todos.filter(todo => {\n                    return todo.id !== id;\n                    \n                }),\n            ],\n        })\n        )\n    };\n\n    addTotoItem = title => {\n        axios.post(\"https://jsonplaceholder.typicode.com/todos\", {\n            title: title,\n            completed: false,\n        })\n        \n        .then(response => \n        this.setState({\n            todos: [...this.state.todos, response.data],\n        }) )\n    };\n\n    //fetching from api during mountiing cycle\n    componentDidMount() {\n        //.get accepts url of endpoint and an optional config object\n        axios.get(\"https://jsonplaceholder.typicode.com/todos\", {\n        //param method sets a query string\n        params: {\n            _limit: 10\n        }\n    })\n     //set state, react knows the toods have changed from empty to api data       \n        .then(response => this.setState({ todos: response.data}));\n    }\n\n    render() {\n        return (\n            //now have the state data in todos prop\n            <div className=\"container\">\n                <Header headerSpan={this.state.show}/>\n                <InputTodo addTodoProps={this.addTotoItem}/>\n                <TodosList \n                todos={this.state.todos}\n                handleChangeProps={this.handleChange}\n                deleteTodoProps={this.delTodo}\n                \n                />\n                \n            </div>\n        )\n    }\n}\n\nexport default ToDoContainer","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport TodoContainer from './components/TodoContainer'\nimport \"./App.css\"\n\nconst element = <h1>Hell from create react app</h1>\nReactDOM.render(<TodoContainer />, document.getElementById(\"root\"))"],"sourceRoot":""}